from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove, CallbackQuery, KeyboardButton
from database.crud import get_user, get_user_records
from datetime import datetime, timedelta
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import io
import logging

router = Router()
logger = logging.getLogger(__name__)

MAIN_MENU_BUTTONS = [
    ["ü©∏ –ì–ª—é–∫–æ–∑–∞", "‚ù§Ô∏è –î–∞–≤–ª–µ–Ω–∏–µ"],
    ["‚öñÔ∏è –í–µ—Å", "üíâ –ò–Ω—Å—É–ª–∏–Ω"],
    ["üçé –ü–∏—Ç–∞–Ω–∏–µ", "üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞"],
    ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
    ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]
]

def main_menu():
    builder = ReplyKeyboardBuilder()
    for row in MAIN_MENU_BUTTONS:
        for button in row:
            builder.button(text=button)
    builder.adjust(2, 2, 2, 2, 1)
    return builder.as_markup(
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª"
    )

def side_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar")
    builder.button(text="üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts")
    builder.button(text="üéØ –¶–µ–ª–∏", callback_data="goals")
    builder.button(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")
    builder.adjust(1)
    return builder.as_markup()

@router.message(Command("start"))
async def start(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /register",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )
    await message.answer(
        "üìå –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø:",
        reply_markup=side_menu()
    )

@router.message(F.text.in_([btn for row in MAIN_MENU_BUTTONS for btn in row]))
async def handle_menu_buttons(message: types.Message):
    implemented = {
        "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å": "profile",
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏": "settings",
        "ü©∏ –ì–ª—é–∫–æ–∑–∞": "glucose"
    }
    
    if message.text in implemented:
        await message.answer(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–æ–º")
    else:
        await message.answer("üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")

@router.message(Command("help"))
async def show_help(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/profile - –ü—Ä–æ—Ñ–∏–ª—å\n"
        "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/help - –ü–æ–º–æ—â—å"
    )
    await message.answer(help_text)
    
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_glucose_stats(message: types.Message):
    try:
        user = await get_user(message.from_user.id)
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
            return

        records = await get_user_records(user.id)
        
        if not records:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≥–ª—é–∫–æ–∑–µ")
            return
        
        response = [
            "üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ä—ã:",
            "‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ"
        ]
        
        for record in records[:10]:
            unit = "–º–º–æ–ª—å/–ª" if record.unit == 'mmol/l' else "–º–≥/–¥–ª"
            response.append(
                f"üïí {record.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"ü©∏ –£—Ä–æ–≤–µ–Ω—å: {record.value} {unit}\n"
                f"üìå –¢–∏–ø: {record.measurement_type or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üß™ –ö–µ—Ç–æ–Ω—ã: {record.ketones or '-'}\n"
                "‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ"
            )
        
        await message.answer("\n".join(response))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(F.data == "charts")
async def show_charts(callback: CallbackQuery):
    buf = None
    try:
        user = await get_user(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
            return

        records = await get_user_records(user.id, limit=30)
        
        if not records:
            await callback.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return
        
        unit = "–º–º–æ–ª—å/–ª" 
        if records and hasattr(records[0], 'unit'):
            unit = "–º–º–æ–ª—å/–ª" if records[0].unit == 'mmol/l' else "–º–≥/–¥–ª"

        dates = [r.created_at for r in records]
        values = [float(r.value) for r in records]

        plt.figure(figsize=(12, 6))
        plt.plot(dates, values, marker='o', linestyle='-', color='#2ecc71', linewidth=2)
        plt.title("üìä –î–∏–Ω–∞–º–∏–∫–∞ —É—Ä–æ–≤–Ω—è –≥–ª—é–∫–æ–∑—ã", fontsize=14, pad=20)
        plt.ylabel(f"–£—Ä–æ–≤–µ–Ω—å ({unit})", fontsize=12)
        plt.xticks(rotation=45, ha='right', fontsize=8)
        plt.gca().xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%d.%m.%Y'))
        plt.grid(True, linestyle='--', alpha=0.5)
        plt.tight_layout()

        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
        buf.seek(0)
        plt.close()

        await callback.message.answer_photo(
            buf,
            caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(records)} –∑–∞–º–µ—Ä–æ–≤"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")
    finally:
        if buf:
            buf.close()