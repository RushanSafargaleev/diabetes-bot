from aiogram import Router, F, types
from aiogram.filters import Command
from database.crud import get_product

router = Router()

@router.message(Command("food"))
async def food_search(message: types.Message):
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")

@router.message(F.text & ~F.command())  # –§–∏–ª—å—Ç—Ä –∏—Å–∫–ª—é—á–∞–µ—Ç –í–°–ï –∫–æ–º–∞–Ω–¥—ã
async def show_product(message: types.Message):
    product = await get_product(message.text.lower())
    if product:
        response = (
            f"üçè {product.name.capitalize()} (100 –≥):\n"
            f"üî• {product.calories} –∫–∫–∞–ª\n"
            f"üçû {product.carbs} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤\n"
            f"üìâ –ì–ò: {product.gi}"
        )
    else:
        response = "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    await message.answer(response)
    
@router.message(F.text & ~F.command())
async def log_meal(message: types.Message):
    try:
        product_name, quantity = message.text.split()
        quantity = int(quantity)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –ë–î
        product = await get_product(product_name.lower())
        if not product:
            return await message.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏
        calories = (product.calories * quantity) // 100
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        async with async_session() as session:
            session.add(MealRecord(
                user_id=message.from_user.id,
                product_id=product.id,
                quantity=quantity,
                calories=calories
            ))
            await session.commit()
            
        await message.answer(f"‚úÖ {quantity} –≥ {product.name} ({calories} –∫–∫–∞–ª) –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        
    except ValueError:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: <–ø—Ä–æ–¥—É–∫—Ç> <–≥—Ä–∞–º–º—ã>\n–ü—Ä–∏–º–µ—Ä: `—è–±–ª–æ–∫–æ 150`", parse_mode="Markdown")